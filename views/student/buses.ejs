<%- include('../partials/header') %>
<%- include('../partials/navbar') %>

<div class="container py-4">
  <!-- Page Header -->
  <div class="d-flex justify-content-between align-items-center mb-4">
    <div>
      <h1 class="h3 mb-1">Available Buses</h1>
      <p class="text-muted mb-0">Find and track all available buses</p>
    </div>
    <a href="/student/dashboard" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left me-2"></i> Back to Dashboard
    </a>
  </div>

  <!-- Messages -->
  <% if (locals.error_msg) { %>
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
      <i class="fas fa-exclamation-circle me-2"></i><%= error_msg %>
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  <% } %>
  
  <% if (locals.success_msg) { %>
    <div class="alert alert-success alert-dismissible fade show" role="alert">
      <i class="fas fa-check-circle me-2"></i><%= success_msg %>
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  <% } %>

  <!-- Bus List -->
  <div class="row g-4">
    <% if (typeof buses !== 'undefined' && buses.length > 0) { %>
      <% buses.forEach(bus => { 
        const availableSeats = bus.capacity - (bus.passengers ? bus.passengers.length : 0);
        const isFull = availableSeats <= 0;
        const capacityPercent = Math.min(100, ((bus.passengers ? bus.passengers.length : 0) / bus.capacity) * 100);
      %>
        <div class="col-12 col-md-6 col-lg-4">
          <div class="card h-100 border-0 shadow-sm overflow-hidden">
            <!-- Bus Header -->
            <div class="card-header bg-white border-bottom-0 pb-0 position-relative">
              <div class="d-flex justify-content-between align-items-start">
                <div>
                  <div class="d-flex align-items-center mb-1">
                    <i class="fas fa-bus text-primary me-2"></i>
                    <h5 class="mb-0"><%= bus.busName %></h5>
                    <span class="badge bg-light text-dark ms-2">#<%= bus.busId %></span>
                  </div>
                  <div class="mt-3">
                    <a href="/student/track/<%= bus._id %>" class="btn btn-primary btn-sm w-100">
                      <i class="fas fa-map-marked-alt me-1"></i> Track Current Bus
                    </a>
                    <% if (bus.stops && bus.stops.length > 0) { %>
                      <div class="mt-2 small text-muted">
                        <div class="fw-medium mb-1">Upcoming Stops:</div>
                        <div class="d-flex flex-wrap gap-1">
                          <% bus.stops.forEach(stop => { %>
                            <span class="badge bg-light text-dark border">
                              <i class="fas fa-map-marker-alt text-primary me-1"></i><%= stop.name %>
                            </span>
                          <% }); %>
                        </div>
                      </div>
                    <% } %>
                  </div>
                </div>
              </div>
              
              <!-- Status Bar -->
              <div class="d-flex justify-content-between align-items-center mb-2">
                <div class="flex-grow-1 me-3">
                  <div class="progress" style="height: 6px;">
                    <div class="progress-bar bg-<%= isFull ? 'danger' : 'success' %>" 
                         role="progressbar" 
                         style="width: <%= capacityPercent %>%"
                         aria-valuenow="<%= capacityPercent %>" 
                         aria-valuemin="0" 
                         aria-valuemax="100">
                    </div>
                  </div>
                </div>
                <span class="small fw-medium text-<%= isFull ? 'danger' : 'success' %>">
                  <i class="fas fa-users"></i> <%= bus.passengers ? bus.passengers.length : 0 %>/<%= bus.capacity %>
                  <span class="text-muted">seats</span>
                </span>
              </div>
            </div>

            <!-- Bus Details -->
            <div class="card-body pt-2">
              <!-- Driver Info -->
              <div class="d-flex align-items-center mb-3">
                <div class="bg-light rounded-circle p-2 me-3">
                  <i class="fas fa-user-tie text-primary"></i>
                </div>
                <div>
                  <p class="small text-muted mb-0">Driver</p>
                  <p class="mb-0 fw-medium"><%= bus.driverName || 'Not assigned' %></p>
                </div>
              </div>

              <!-- Location -->
              <div class="d-flex align-items-center mb-3">
                <div class="bg-light rounded-circle p-2 me-3">
                  <i class="fas fa-map-marker-alt text-primary"></i>
                </div>
                <div>
                  <p class="small text-muted mb-0">Current Location</p>
                  <p class="mb-0 fw-medium"><%= bus.currentLocation || 'Not available' %></p>
                </div>
              </div>

              <!-- Next Trip -->
              <div class="bg-light p-3 rounded mb-3">
                <h6 class="small text-uppercase text-muted mb-2">
                  <i class="far fa-clock me-1"></i> Next Trip
                </h6>
                <% 
                  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                  const today = days[new Date().getDay()];
                  const todaySchedules = bus.schedule && Array.isArray(bus.schedule) ? 
                    bus.schedule.filter(s => s.days && s.days.includes(today)) : [];
                  const nextSchedule = todaySchedules[0];
                %>
                
                <% if (nextSchedule) { %>
                  <div class="d-flex align-items-center">
                    <div class="text-center me-3">
                      <div class="fw-bold text-primary"><%= nextSchedule.time %></div>
                      <% if (nextSchedule.duration) { %>
                        <div class="small text-muted"><%= nextSchedule.duration %></div>
                      <% } %>
                    </div>
                    <div class="vr mx-2"></div>
                    <div>
                      <div class="fw-medium"><%= nextSchedule.departure || '--' %></div>
                      <div class="small text-muted">
                        <i class="fas fa-arrow-down text-xs me-1"></i> 
                        <%= nextSchedule.arrival || '--' %>
                      </div>
                    </div>
                  </div>
                  <p class="mb-0 text-muted small">No schedule for today</p>
                <% } %>
              </div>
            </div>

                   <!-- Card Footer -->
                   <div class="card-footer bg-white border-top-0 pt-0">
                     <div class="d-grid gap-2">
                       <a href="/student/bus-details/<%= bus._id %>" 
                          class="btn btn-<%= isFull ? 'outline-danger' : 'primary' %>">
                         <i class="fas fa-<%= isFull ? 'exclamation-circle' : 'info-circle' %> me-2"></i>
                         <%= isFull ? 'Bus Full' : 'View Details' %>
                       </a>
                     </div>
                   </div>
          </div>
        </div>
      <% }); %>
    <% } else { %>
      <div class="col-12">
        <div class="card border-0 shadow-sm">
          <div class="card-body text-center py-5">
            <div class="bg-light rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 80px; height: 80px;">
              <i class="fas fa-bus text-muted fa-2x"></i>
            </div>
            <h5 class="mb-2">No Buses Available</h5>
            <p class="text-muted mb-0">There are currently no active buses. Please check back later.</p>
          </div>
        </div>
      </div>
    <% } %>
  </div>
</div>

<!-- Request Bus Modal -->
<div class="modal fade" id="requestBusModal" tabindex="-1" aria-labelledby="requestBusModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content border-0 shadow">
      <div class="modal-header bg-primary text-white">
        <h5 class="modal-title" id="requestBusModalLabel">Request Bus</h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="busRequestForm" action="/api/bus-requests" method="POST">
        <div class="modal-body">
          <input type="hidden" name="busId" id="busId">
          
          <div class="mb-3">
            <label for="boardingStop" class="form-label fw-medium">Boarding Stop</label>
            <div class="input-group">
              <span class="input-group-text"><i class="fas fa-map-marker-alt"></i></span>
              <input type="text" class="form-control" id="boardingStop" name="boardingStop" required 
                     placeholder="Enter your boarding stop">
            </div>
            <div class="form-text text-muted small">Select your nearest boarding point</div>
          </div>
          
          <div class="mb-4">
            <label for="destination" class="form-label fw-medium">Destination</label>
            <div class="input-group">
              <span class="input-group-text"><i class="fas fa-flag-checkered"></i></span>
              <input type="text" class="form-control" id="destination" name="destination" required
                     placeholder="Enter your destination">
            </div>
            <div class="form-text text-muted small">Where are you going today?</div>
          </div>
          
          <div class="alert alert-info bg-light border-0 small">
            <div class="d-flex align-items-center">
              <i class="fas fa-info-circle me-2 text-primary"></i>
              <div>Your request will be reviewed by the bus administrator. You'll be notified once approved.</div>
            </div>
          </div>
          
          <div id="formAlert" class="alert d-none"></div>
        </div>
        <div class="modal-footer bg-light border-top">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">
            <i class="fas fa-times me-1"></i> Cancel
          </button>
          <button type="submit" class="btn btn-primary px-4">
            <i class="fas fa-paper-plane me-1"></i> Submit Request
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
// Wait for DOM to be fully loaded
document.addEventListener('DOMContentLoaded', function() {
  // Initialize the modal
  const requestBusModalEl = document.getElementById('requestBusModal');
  const busRequestForm = document.getElementById('busRequestForm');
  
  // Initialize tooltips
  const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
  tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl);
  });
  
  // Initialize modal if it exists
  if (requestBusModalEl) {
    const requestBusModal = new bootstrap.Modal(requestBusModalEl, {
      backdrop: 'static',
      keyboard: false
    });
    
    // Set up modal show event to populate bus info
    requestBusModalEl.addEventListener('show.bs.modal', function (event) {
      const button = event.relatedTarget;
      const busId = button.getAttribute('data-bus-id');
      const busName = button.getAttribute('data-bus-name');
      
      const modalTitle = document.querySelector('#requestBusModal .modal-title');
      const busIdInput = document.getElementById('busId');
      
      if (modalTitle) modalTitle.textContent = `Request Bus: ${busName}`;
      if (busIdInput) busIdInput.value = busId;
      
      // Reset form and alerts
      if (busRequestForm) {
        busRequestForm.reset();
        const alert = document.getElementById('formAlert');
        if (alert) {
          alert.classList.add('d-none');
          alert.textContent = '';
        }
      }
    });
    
    // Close modal handler
    requestBusModalEl.addEventListener('hidden.bs.modal', function () {
      // Reset form when modal is closed
      if (busRequestForm) busRequestForm.reset();
    });
    
    // Handle bus request form submission
    if (busRequestForm) {
      busRequestForm.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const submitBtn = this.querySelector('button[type="submit"]');
        const originalBtnText = submitBtn.innerHTML;
        const formAlert = document.getElementById('formAlert');
        
        // Show loading state
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Submitting...';
        
        // Clear previous alerts
        if (formAlert) {
          formAlert.classList.add('d-none');
          formAlert.innerHTML = '';
        }
  
        // Prepare form data
        const formData = {
          busId: document.getElementById('busId').value,
          boardingStop: document.getElementById('boardingStop').value.trim(),
          destination: document.getElementById('destination').value.trim()
        };

        // Client-side validation
        if (!formData.boardingStop || !formData.destination) {
          showAlert('Please fill in all required fields', 'danger');
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalBtnText;
          return;
        }

        try {
          const response = await fetch('/api/bus-requests/request', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            body: JSON.stringify(formData)
          });

          const data = await response.json();
          
          if (data.success) {
            // Show success message
            const alert = document.createElement('div');
            alert.className = 'alert alert-success alert-dismissible fade show';
            // Close the modal
            const requestBusModal = bootstrap.Modal.getInstance(requestBusModalEl);
            requestBusModal.hide();
            // Refresh the page after a short delay
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            showAlert(data.message || 'Failed to submit request. Please try again.', 'danger');
          }
        } catch (error) {
          console.error('Error:', error);
          
          // Show error in form
          if (formAlert) {
            formAlert.classList.remove('d-none', 'alert-success');
            formAlert.classList.add('alert-danger');
            formAlert.innerHTML = `
              <i class="fas fa-exclamation-circle me-2"></i>
              An error occurred. Please check your connection and try again.
            `;
          }
          
          // Also show a toast notification
          showAlert('An error occurred. Please try again.', 'danger');
        } finally {
          if (submitBtn) {
            submitBtn.disabled = false;
            submitBtn.innerHTML = originalBtnText;
          }
        }
      }); // Close form submit event listener
    } // Close if (busRequestForm)
  }); // Close DOMContentLoaded event listener
</script>

<script>
// Show alert function
function showAlert(message, type = 'info') {
  // Create toast container if it doesn't exist
  let toastContainer = document.getElementById('toast-container');
  if (!toastContainer) {
    toastContainer = document.createElement('div');
    toastContainer.id = 'toast-container';
    toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
    toastContainer.style.zIndex = '1100';
    document.body.appendChild(toastContainer);
  }
  
  // Create toast element
  const toastId = 'toast-' + Date.now();
  const toast = document.createElement('div');
  toast.id = toastId;
  toast.className = `toast align-items-center text-white bg-${type} border-0`;
  toast.role = 'alert';
  toast.setAttribute('aria-live', 'assertive');
  toast.setAttribute('aria-atomic', 'true');
  
  // Toast content
  toast.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">
        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'} me-2"></i>
        ${message}
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
  `;
  
  // Add to container
  toastContainer.appendChild(toast);
  
  // Initialize and show toast
  const bsToast = new bootstrap.Toast(toast, { autohide: true, delay: 5000 });
  bsToast.show();
  
  // Remove toast after it's hidden
  toast.addEventListener('hidden.bs.toast', function () {
    toast.remove();
    
    // Remove container if no more toasts
    if (toastContainer.children.length === 0) {
      toastContainer.remove();
    }
  });
}
</script>

<%- include('../partials/footer') %> 