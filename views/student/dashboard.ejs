<div class="container animate__animated animate__fadeIn">
  <div class="row mb-4">
    <div class="col-12">
      <div class="card shadow-sm border-primary">
        <div class="card-body">
          <div class="d-flex justify-content-between align-items-center">
            <div>
              <h2 class="card-title">
                <i class="fas fa-tachometer-alt text-primary me-2"></i> Student Dashboard
              </h2>
              <p class="lead">Welcome back, <%= user.name %> ðŸ‘‹</p>
              <p class="text-muted">Student ID: <%= user.studentId %> | Department: <%= user.department %></p>
            </div>
            <div class="d-flex gap-2">
              <button class="btn btn-success btn-lg" data-bs-toggle="modal" data-bs-target="#bookBusModal">
                <i class="fas fa-bus me-2"></i> Book Bus
              </button>
              <a href="/student/buses" class="btn btn-primary btn-lg">
                <i class="fas fa-list me-2"></i> View All Buses
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <% if (locals.error) { %>
    <div class="alert alert-danger"><%= error %></div>
  <% } %>

  <!-- Current Bus Assignment -->
  <div class="row mb-4">
    <div class="col-12">
      <div class="card shadow-sm mb-4">
        <div class="card-header bg-primary text-white">
          <h5 class="mb-0"><i class="fas fa-bus me-2"></i> My Bus Assignment</h5>
        </div>
        <div class="card-body">
          <% if (user.assignedBus) { %>
            <div class="alert alert-success">
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <h5><i class="fas fa-check-circle me-2"></i> Assigned to Bus</h5>
                  <p class="mb-0"><strong><%= user.assignedBus.busName %></strong> (Route: <%= user.assignedBus.route %>)</p>
                  <p class="mb-0">Driver: <%= user.assignedBus.driverName %></p>
                  <p class="mb-0">Boarding: <%= user.boardingStop %></p>
                  <p class="mb-0">Status: <span class="badge bg-success">Active</span></p>
                </div>
                <div class="text-end">
                  <a href="/student/buses" class="btn btn-outline-primary">
                    <i class="fas fa-bus me-1"></i> View Bus Details
                  </a>
                </div>
              </div>
            </div>
          <% } else if (user.pendingBusRequest) { %>
            <div class="alert alert-warning">
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <h5><i class="fas fa-clock me-2"></i> Pending Request</h5>
                  <p class="mb-0">Bus: <strong><%= user.pendingBusRequest.busName %></strong></p>
                  <p class="mb-0">Requested on: <%= new Date(user.pendingBusRequest.requestedAt).toLocaleString() %></p>
                  <p class="mb-0">Status: <span class="badge bg-warning">Pending Approval</span></p>
                </div>
                <div>
                  <button class="btn btn-outline-danger btn-sm" onclick="cancelBusRequest('<%= user.pendingBusRequest._id %>')">
                    <i class="fas fa-times me-1"></i> Cancel Request
                  </button>
                </div>
              </div>
            </div>
          <% } else { %>
            <div class="alert alert-info">
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <h5><i class="fas fa-info-circle me-2"></i> No Bus Assignment</h5>
                  <p class="mb-0">You are not currently assigned to any bus. Please contact the administrator for bus assignment.</p>
                </div>
              </div>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>

  <div class="row mb-4">
    <div class="col-md-4 mb-4 mb-md-0">
      <div class="card shadow-sm h-100 animate__animated animate__fadeInUp animate__delay-1s">
        <div class="card-body text-center">
          <div class="icon-wrapper mb-3">
            <i class="fas fa-bus fa-3x text-primary"></i>
          </div>
          <h5 class="card-title">Available Buses</h5>
          <p class="display-4 fw-bold text-primary">
            <% if (typeof busesCount !== 'undefined') { %>
              <%= busesCount %>
            <% } else { %>
              0
            <% } %>
          </p>
          <p class="card-text">Buses currently in service today</p>
          <a href="/student/buses" class="btn btn-primary btn-sm">
            <i class="fas fa-list me-1"></i> View All Buses
          </a>
        </div>
      </div>
    </div>
    
    <div class="col-md-4 mb-4 mb-md-0">
      <div class="card shadow-sm h-100 animate__animated animate__fadeInUp animate__delay-2s">
        <div class="card-body text-center">
          <div class="icon-wrapper mb-3">
            <i class="fas fa-map-marker-alt fa-3x text-danger"></i>
          </div>
          <h5 class="card-title">Track Current Bus</h5>
          <p class="card-text">Track bus location in real-time</p>
          <select id="busSelector" class="form-select mb-3">
            <option value="">Select a bus to track</option>
            <% if (typeof buses !== 'undefined' && buses.length > 0) { %>
              <% buses.forEach(bus => { %>
                <option value="<%= bus.busId %>"><%= bus.busName %> (#<%= bus.busId %>) - <%= bus.route %></option>
              <% }); %>
            <% } %>
          </select>
          <button id="trackSelectedBus" class="btn btn-danger btn-sm">
            <i class="fas fa-location-arrow me-1"></i> Track Selected Bus
          </button>
        </div>
      </div>
    </div>
    
    <div class="col-md-4">
      <div class="card shadow-sm h-100 animate__animated animate__fadeInUp animate__delay-3s">
        <div class="card-body text-center">
          <div class="icon-wrapper mb-3">
            <i class="fas fa-calendar-alt fa-3x text-success"></i>
          </div>
          <h5 class="card-title">Bus Schedule</h5>
          <p class="display-4 fw-bold text-success">
            <% if (typeof busesWithScheduleToday !== 'undefined') { %>
              <%= busesWithScheduleToday.length %>
            <% } else { %>
              0
            <% } %>
          </p>
          <p class="card-text">Buses scheduled for today</p>
          <a href="/student/schedule" class="btn btn-success btn-sm">
            <i class="fas fa-clock me-1"></i> View Schedule
          </a>
        </div>
      </div>
    </div>
  </div>
  
  <div class="row">
    <div class="col-md-8 mb-4 mb-md-0">
      <div class="card shadow-sm animate__animated animate__fadeIn animate__delay-4s">
        <div class="card-header bg-light">
          <h5 class="mb-0">
            <i class="fas fa-calendar-alt me-2 text-primary"></i> Today's Schedule
          </h5>
        </div>
        <div class="card-body">
          <% if (typeof busesWithScheduleToday !== 'undefined' && busesWithScheduleToday.length > 0) { %>
            <div class="table-responsive">
              <table class="table table-hover">
                <thead>
                  <tr>
                    <th>Bus</th>
                    <th>Departure</th>
                    <th>Route</th>
                    <th>Status</th>
                    <th>Actions</th>
                  </tr>
                </thead>
                <tbody>
                  <% busesWithScheduleToday.forEach(bus => { %>
                    <% 
                      // Get today's schedule items for this bus
                      const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
                      const today = days[new Date().getDay()];
                      const todaySchedules = bus.schedule.filter(s => s.days.includes(today));
                      
                      // Show only the first schedule if there are multiple
                      const scheduleToShow = todaySchedules[0] || {}; 
                    %>
                    <tr>
                      <td><%= bus.busName %> (#<%= bus.busId %>)</td>
                      <td><%= scheduleToShow.time || 'N/A' %></td>
                      <td><%= bus.route %></td>
                      <td>
                        <% if (bus.isActive) { %>
                          <span class="badge bg-success">Active</span>
                        <% } else { %>
                          <span class="badge bg-warning text-dark">Inactive</span>
                        <% } %>
                      </td>
                      <td>
                        <a href="/student/track/<%= bus.busId %>" class="btn btn-sm btn-primary">
                          <i class="fas fa-map-marker-alt"></i> Track
                        </a>
                      </td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          <% } else { %>
            <div class="alert alert-info">
              No buses scheduled for today. Check the full schedule for more options.
            </div>
          <% } %>
        </div>
      </div>
    </div>
    
    <div class="col-md-4">
      <div class="card shadow-sm animate__animated animate__fadeIn animate__delay-4s">
        <div class="card-header bg-light">
          <h5 class="mb-0">
            <i class="fas fa-bell me-2 text-primary"></i> Bus Alerts
          </h5>
        </div>
        <div class="card-body p-0">
          <ul class="list-group list-group-flush">
            <% if (typeof buses !== 'undefined' && buses.length > 0) { %>
              <% 
                // Get buses with recent activity
                const busesWithActivity = buses.filter(bus => 
                  bus.recentActivity && bus.recentActivity.length > 0
                );
                
                if (busesWithActivity.length > 0) {
                  // Get the latest 4 activities
                  const recentActivities = [];
                  busesWithActivity.forEach(bus => {
                    bus.recentActivity.forEach(activity => {
                      recentActivities.push({
                        busId: bus.busId,
                        busName: bus.busName,
                        ...activity.toObject()
                      });
                    });
                  });
                  
                  // Sort by timestamp
                  recentActivities.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
                  
                  // Display the 4 most recent activities
                  recentActivities.slice(0, 4).forEach(activity => {
              %>
                <li class="list-group-item d-flex align-items-center py-3">
                  <div class="me-3">
                    <span class="badge rounded-circle bg-info p-2">
                      <i class="fas fa-bus"></i>
                    </span>
                  </div>
                  <div>
                    <p class="mb-0 fw-medium">
                      Bus <%= activity.busId %>: <%= activity.action %>
                    </p>
                    <small class="text-muted">
                      <%= new Date(activity.timestamp).toLocaleString() %>
                    </small>
                  </div>
                </li>
              <% 
                  });
                } else {
              %>
                <li class="list-group-item text-center py-4">
                  <i class="fas fa-info-circle fa-2x text-muted mb-2"></i>
                  <p>No recent bus alerts</p>
                </li>
              <% } %>
            <% } else { %>
              <li class="list-group-item text-center py-4">
                <i class="fas fa-info-circle fa-2x text-muted mb-2"></i>
                <p>No bus alerts available</p>
              </li>
            <% } %>
          </ul>
        </div>
      </div>
    </div>
  </div>
<!-- Book Bus Modal -->
<div class="modal fade" id="bookBusModal" tabindex="-1" aria-labelledby="bookBusModalLabel" aria-hidden="true" style="pointer-events: auto !important;">
  <div class="modal-dialog modal-dialog-centered" style="pointer-events: auto !important;">
    <div class="modal-content border-0 shadow" style="pointer-events: auto !important;">
      <div class="modal-header bg-success text-white">
        <h5 class="modal-title" id="bookBusModalLabel">
          <i class="fas fa-bus me-2"></i>Book a Bus
        </h5>
        <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <form id="bookBusForm" action="/api/bus-requests/request" method="POST">
        <div class="modal-body">
          <div class="mb-3">
            <label for="bookBusSelect" class="form-label fw-medium">Select Bus</label>
            <select class="form-select" id="bookBusSelect" name="busId" required style="pointer-events: auto !important; cursor: pointer !important;">
              <option value="">-- Select a Bus --</option>
              <% if (typeof buses !== 'undefined' && buses.length > 0) { %>
                <% buses.forEach(bus => { %>
                  <option value="<%= bus._id %>">
                    <%= bus.busName %> (#<%= bus.busId %>) - <%= bus.route %>
                  </option>
                <% }); %>
              <% } else { %>
                <option value="" disabled>No buses available</option>
              <% } %>
            </select>
          </div>

          <div class="mb-3">
            <label for="bookBoardingStop" class="form-label fw-medium">Boarding Stop</label>
            <div class="input-group">
              <span class="input-group-text"><i class="fas fa-map-marker-alt"></i></span>
              <input type="text" class="form-control" id="bookBoardingStop" name="boardingStop" required
                     placeholder="Enter your boarding stop" style="pointer-events: auto !important; cursor: text !important;">
            </div>
          </div>

          <div class="mb-4">
            <label for="bookDestination" class="form-label fw-medium">Destination</label>
            <div class="input-group">
              <span class="input-group-text"><i class="fas fa-flag-checkered"></i></span>
              <input type="text" class="form-control" id="bookDestination" name="destination" required
                     placeholder="Enter your destination" style="pointer-events: auto !important; cursor: text !important;">
            </div>
          </div>

          <div class="alert alert-info bg-light border-0 small">
            <div class="d-flex align-items-center">
              <i class="fas fa-info-circle me-2 text-primary"></i>
              <div>Your request will be sent to the bus driver for approval.</div>
            </div>
          </div>
        </div>
        <div class="modal-footer bg-light border-top">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" style="pointer-events: auto !important; cursor: pointer !important;">
            <i class="fas fa-times me-1"></i> Cancel
          </button>
          <button type="submit" class="btn btn-success px-4" style="pointer-events: auto !important; cursor: pointer !important;">
            <i class="fas fa-paper-plane me-1"></i> Submit Request
          </button>
        </div>
      </form>
    </div>
  </div>
</div>
<div class="row mt-4 mb-4">
  <div class="col-12">
    <div class="card shadow-sm">
      <div class="card-header bg-light d-flex justify-content-between align-items-center">
        <h5 class="mb-0">
          <i class="fas fa-map-marked-alt me-2 text-primary"></i> Live Bus Tracking Map
        </h5>
        <button class="btn btn-sm btn-outline-primary" id="refreshBusMap">
          <i class="fas fa-sync-alt me-1"></i> Refresh Map
        </button>
      </div>
      <div class="card-body p-0">
        <% if (typeof buses !== 'undefined' && buses.length > 0) { %>
          <div id="studentBusMap" style="height: 400px; width: 100%;"></div>
        <% } else { %>
          <div class="text-center py-5">
            <i class="fas fa-map-marked-alt fa-4x text-muted mb-3"></i>
            <h5>No buses currently active</h5>
            <p class="text-muted">Bus location data will appear when buses are active</p>
          </div>
        <% } %>
      </div>
      <div class="card-footer bg-light">
        <div class="row">
          <div class="col-md-6">
            <div class="d-flex align-items-center">
              <span class="badge rounded-pill bg-success p-2 me-2"><i class="fas fa-bus"></i></span>
              <span class="small">Active Bus</span>
              
              <span class="badge rounded-pill bg-warning text-dark p-2 me-2 ms-3"><i class="fas fa-bus"></i></span>
              <span class="small">En Route</span>
            </div>
          </div>
          <div class="col-md-6 text-end">
            <span class="text-muted small">Select a bus on the map to see details</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<!-- Feedback & Complaint Section -->
<div class="row mt-4">
    <div class="col-12">
        <div class="accordion" id="communicationAccordion">
            <!-- Feedback Section -->
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                        data-bs-target="#feedbackCollapse" aria-expanded="false" aria-controls="feedbackCollapse">
                        <i class="fas fa-comment-dots me-2"></i> Send Feedback to Driver & Admin
                    </button>
                </h2>
                <div id="feedbackCollapse" class="accordion-collapse collapse" data-bs-parent="#communicationAccordion">
                    <div class="accordion-body">
                        <div id="feedbackSuccessAlert" class="alert alert-success d-none">
                            <i class="fas fa-check-circle me-2"></i> Your feedback has been submitted successfully! Thank you for your input.
                        </div>
                        <form id="feedbackForm" action="/student/send-feedback" method="POST">
                            <div class="mb-3">
                                <label for="feedbackBusId" class="form-label">Select Bus (Optional)</label>
                                <select class="form-select" id="feedbackBusId" name="busId">
                                    <option value="">-- Select a Bus --</option>
                                    <% if (typeof buses !== 'undefined' && buses.length > 0) { %>
                                        <% buses.forEach(bus => { %>
                                            <option value="<%= bus._id %>">
                                                <%= bus.name || 'Bus' %> 
                                                <% if (bus.busNumber) { %>(<%= bus.busNumber %>)<% } %>
                                            </option>
                                        <% }); %>
                                    <% } else { %>
                                        <option value="" disabled>No buses available</option>
                                    <% } %>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="feedbackSubject" class="form-label">Subject</label>
                                <input type="text" class="form-control" id="feedbackSubject" name="subject" required placeholder="Brief subject of your feedback">
                            </div>
                            <div class="mb-3">
                                <label for="feedbackMessage" class="form-label">Your Feedback</label>
                                <textarea class="form-control" id="feedbackMessage" name="message" rows="4" required placeholder="Share your experience or suggestions..."></textarea>
                            </div>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="feedbackAnonymous" name="isAnonymous">
                                <label class="form-check-label" for="feedbackAnonymous">
                                    Submit Anonymously
                                </label>
                            </div>
                            <button type="submit" class="btn btn-primary">
                                <i class="fas fa-paper-plane me-1"></i> Send Feedback
                            </button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Complaint Section -->
            <div class="accordion-item">
                <h2 class="accordion-header">
                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" 
                        data-bs-target="#complaintCollapse" aria-expanded="false" aria-controls="complaintCollapse">
                        <i class="fas fa-exclamation-circle me-2"></i> Submit Complaint to Admin
                    </button>
                </h2>
                <div id="complaintCollapse" class="accordion-collapse collapse" data-bs-parent="#communicationAccordion">
                    <div class="accordion-body">
                        <div id="complaintSuccessAlert" class="alert alert-success d-none">
                            <i class="fas fa-check-circle me-2"></i> Your complaint has been submitted successfully! An administrator will review it shortly.
                        </div>
                        <form id="complaintForm" action="/student/send-complaint" method="POST">
                            <div class="mb-3">
                                <label for="complaintBusId" class="form-label">Select Bus (Optional)</label>
                                <select class="form-select" id="complaintBusId" name="busId">
                                    <option value="">-- Select a Bus --</option>
                                    <% if (typeof buses !== 'undefined' && buses.length > 0) { %>
                                        <% buses.forEach(bus => { %>
                                            <option value="<%= bus._id %>">
                                                <%= bus.name || 'Bus' %> 
                                                <% if (bus.busNumber) { %>(<%= bus.busNumber %>)<% } %>
                                            </option>
                                        <% }); %>
                                    <% } else { %>
                                        <option value="" disabled>No buses available</option>
                                    <% } %>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="complaintType" class="form-label">Complaint Type</label>
                                <select class="form-select" id="complaintType" name="type" required>
                                    <option value="">-- Select Type --</option>
                                    <option value="schedule">Schedule/Timing Issue</option>
                                    <option value="behavior">Driver/Staff Behavior</option>
                                    <option value="cleanliness">Cleanliness/Maintenance</option>
                                    <option value="safety">Safety Concern</option>
                                    <option value="technical">Technical Problem</option>
                                    <option value="other">Other</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="complaintSubject" class="form-label">Subject</label>
                                <input type="text" class="form-control" id="complaintSubject" name="subject" required placeholder="Brief subject of your complaint">
                            </div>
                            <div class="mb-3">
                                <label for="complaintMessage" class="form-label">Complaint Details</label>
                                <textarea class="form-control" id="complaintMessage" name="message" rows="4" required placeholder="Please provide specific details about your complaint..."></textarea>
                            </div>
                            <div class="mb-3">
                                <label for="complaintSeverity" class="form-label">Severity Level</label>
                                <input type="range" class="form-range" min="1" max="5" id="complaintSeverity" name="severity" value="3">
                                <div class="d-flex justify-content-between">
                                    <span class="text-muted">Low</span>
                                    <span id="severityValue" class="fw-bold">Medium</span>
                                    <span class="text-muted">High</span>
                                </div>
                            </div>
                            <div class="form-check mb-3">
                                <input class="form-check-input" type="checkbox" id="complaintAnonymous" name="isAnonymous">
                                <label class="form-check-label" for="complaintAnonymous">
                                    Submit Anonymously
                                </label>
                            </div>
                            <button type="submit" class="btn btn-danger">
                                <i class="fas fa-exclamation-triangle me-1"></i> Submit Complaint
                            </button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add Leaflet CSS and JS after your existing scripts -->
<% if (typeof buses !== 'undefined' && buses.length > 0) { %>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" 
      integrity="sha256-p4NxAoJBhIIN+hmNHrzRCf9tD/miZyoHS5obTRR9BMY=" 
      crossorigin="" />

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js" 
        integrity="sha256-20nQCchB9co0qIjJZRGuk2/Z9VM+kNiyxNV1lvTlZBo=" 
        crossorigin=""></script>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Initialize map if element exists
    const mapElement = document.getElementById('studentBusMap');
    if (mapElement) {
      // Initialize the map (centered on India)
      const map = L.map('studentBusMap').setView([20.5937, 78.9629], 5);
      
      // Add OpenStreetMap tile layer
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(map);
      
      // Store bus markers for later reference
      const busMarkers = {};
      
      // Function to load bus locations
      function loadBusLocations() {
        <% if (typeof buses !== 'undefined' && buses.length > 0) { %>
          <% buses.forEach(bus => { %>
            // Skip buses without coordinates
            <% if (bus.currentCoordinates && bus.currentCoordinates.lat && bus.currentCoordinates.lon) { %>
              // If marker already exists, update position
              if (busMarkers['bus<%= bus._id %>']) {
                busMarkers['bus<%= bus._id %>'].setLatLng(
                  [<%= bus.currentCoordinates.lat %>, <%= bus.currentCoordinates.lon %>]
                );
              } else {
                // Create new marker
                const marker = L.marker(
                  [<%= bus.currentCoordinates.lat %>, <%= bus.currentCoordinates.lon %>], 
                  {
                    icon: L.divIcon({
                      className: 'bus-icon',
                      html: `<div class="map-bus-icon bg-<%= bus.isActive ? 'success' : 'warning' %>">
                              <i class="fas fa-bus"></i>
                            </div>`,
                      iconSize: [32, 32],
                      iconAnchor: [16, 32]
                    })
                  }
                ).addTo(map);
                
                // Add popup with bus info
                marker.bindPopup(`
                  <div class="bus-popup">
                    <h6><%= bus.busName %> (#<%= bus.busId %>)</h6>
                    <p><strong>Route:</strong> <%= bus.route %></p>
                    <p><strong>Status:</strong> <%= bus.isActive ? 'Active' : 'Inactive' %></p>
                    <p><strong>Current Location:</strong> <%= bus.currentLocation %></p>
                    <p><strong>Last Updated:</strong> <%= bus.currentCoordinates.lastUpdated ? new Date(bus.currentCoordinates.lastUpdated).toLocaleString() : 'Unknown' %></p>
                    <a href="/student/track/<%= bus.busId %>" class="btn btn-sm btn-primary w-100">
                      <i class="fas fa-map-marker-alt me-1"></i> Track Details
                    </a>
                  </div>
                `);
                
                busMarkers['bus<%= bus._id %>'] = marker;
              }
            <% } %>
          <% }); %>
          
          // If we have buses with coordinates, fit map bounds to show all buses
          if (Object.keys(busMarkers).length > 0) {
            const markers = Object.values(busMarkers);
            const group = L.featureGroup(markers);
            map.fitBounds(group.getBounds().pad(0.1));
          }
        <% } %>
      }
      
      // Load bus locations initially
      loadBusLocations();
      
      // Set up refresh button
      document.getElementById('refreshBusMap').addEventListener('click', function() {
        // Refresh bus location data from API
        fetch('/student/api/all-bus-locations')
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              // Clear existing markers
              Object.values(busMarkers).forEach(marker => map.removeLayer(marker));
              busMarkers = {};
              
              // Add new markers
              data.buses.forEach(bus => {
                if (bus.coordinates && bus.coordinates.lat && bus.coordinates.lon) {
                  const marker = L.marker(
                    [bus.coordinates.lat, bus.coordinates.lon], 
                    {
                      icon: L.divIcon({
                        className: 'bus-icon',
                        html: `<div class="map-bus-icon bg-${bus.isActive ? 'success' : 'warning'}">
                                <i class="fas fa-bus"></i>
                              </div>`,
                        iconSize: [32, 32],
                        iconAnchor: [16, 32]
                      })
                    }
                  ).addTo(map);
                  
                  marker.bindPopup(`
                    <div class="bus-popup">
                      <h6>${bus.busName} (#${bus.busId})</h6>
                      <p><strong>Route:</strong> ${bus.route}</p>
                      <p><strong>Status:</strong> ${bus.isActive ? 'Active' : 'Inactive'}</p>
                      <p><strong>Current Location:</strong> ${bus.currentLocation}</p>
                      <p><strong>Last Updated:</strong> ${new Date(bus.lastUpdated).toLocaleString()}</p>
                      <a href="/student/track/${bus.busId}" class="btn btn-sm btn-primary w-100">
                        <i class="fas fa-map-marker-alt me-1"></i> Track Details
                      </a>
                    </div>
                  `);
                  
                  busMarkers[`bus${bus._id}`] = marker;
                }
              });
              
              // Fit map to show all buses
              if (Object.keys(busMarkers).length > 0) {
                const markers = Object.values(busMarkers);
                const group = L.featureGroup(markers);
                map.fitBounds(group.getBounds().pad(0.1));
              }
            }
          })
          .catch(error => console.error('Error fetching bus locations:', error));
      });
      
      // Add custom CSS for bus icons
      const style = document.createElement('style');
      style.textContent = `
        .map-bus-icon {
          width: 32px;
          height: 32px;
          border-radius: 50%;
          display: flex;
          align-items: center;
          justify-content: center;
          color: white;
          box-shadow: 0 2px 5px rgba(0,0,0,0.3);
        }
        .bus-popup {
          min-width: 200px;
        }
      `;
      document.head.appendChild(style);
    }
  });
</script>
<% } %>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Bus selector functionality
    const busSelector = document.getElementById('busSelector');
    const trackButton = document.getElementById('trackSelectedBus');
    
    trackButton.addEventListener('click', function() {
      const selectedBusId = busSelector.value;
      if (selectedBusId) {
        window.location.href = `/student/track/${selectedBusId}`;
      } else {
        alert('Please select a bus to track');
      }
    });
    
    // Handle Feedback Form Submission
    document.getElementById('feedbackForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const jsonData = {};
        formData.forEach((value, key) => {
            if (key === 'isAnonymous') {
                jsonData[key] = true;
            } else {
                jsonData[key] = value;
            }
                successAlert.classList.remove('d-none');
                document.getElementById('feedbackForm').reset();
                
                // Hide the alert after 5 seconds
                setTimeout(() => {
                    successAlert.classList.add('d-none');
                }, 5000);
            } else {
                successAlert.textContent = data.message || 'There was an error submitting your feedback. Please try again.';
                successAlert.classList.remove('alert-success');
                successAlert.classList.add('alert-danger', 'd-none');
                
                // Hide the alert after 5 seconds
                setTimeout(() => {
                    successAlert.classList.add('d-none');
                    successAlert.classList.remove('alert-danger');
                    successAlert.classList.add('alert-success');
                }, 5000);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            const successAlert = document.getElementById('feedbackSuccessAlert');
            successAlert.textContent = 'There was an error submitting your feedback. Please try again.';
            successAlert.classList.remove('alert-success', 'd-none');
            successAlert.classList.add('alert-danger');
            
            // Hide the alert after 5 seconds
            setTimeout(() => {
                successAlert.classList.add('d-none');
                successAlert.classList.remove('alert-danger');
                successAlert.classList.add('alert-success');
            }, 5000);
        });
    });

    // Handle Complaint Form Submission
    document.getElementById('complaintForm').addEventListener('submit', function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const jsonData = {};
        formData.forEach((value, key) => {
            if (key === 'isAnonymous') {
                jsonData[key] = true;
            } else {
                jsonData[key] = value;
            }
        });
        
        // If not checked, explicitly set isAnonymous to false
        if (!formData.has('isAnonymous')) {
            jsonData.isAnonymous = false;
        }
        
        fetch('/student/send-complaint', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(jsonData)
        })
        .then(response => response.json())
        .then(data => {
            const successAlert = document.getElementById('complaintSuccessAlert');
            if (data.success) {
                successAlert.textContent = data.message || 'Your complaint has been submitted successfully! An administrator will review it shortly.';
                successAlert.classList.remove('d-none');
                document.getElementById('complaintForm').reset();
                document.getElementById('severityValue').textContent = 'Medium';
                document.getElementById('severityValue').style.color = '#6c757d';
                
                // Hide the alert after 5 seconds
                setTimeout(() => {
                    successAlert.classList.add('d-none');
                }, 5000);
            } else {
                successAlert.textContent = data.message || 'There was an error submitting your complaint. Please try again.';
                successAlert.classList.remove('alert-success');
                successAlert.classList.add('alert-danger', 'd-none');
                
                // Hide the alert after 5 seconds
                setTimeout(() => {
                    successAlert.classList.add('d-none');
                    successAlert.classList.remove('alert-danger');
                    successAlert.classList.add('alert-success');
                }, 5000);
            }
        })
        .catch(error => {
            console.error('Error:', error);
            const successAlert = document.getElementById('complaintSuccessAlert');
            successAlert.textContent = 'There was an error submitting your complaint. Please try again.';
            successAlert.classList.remove('alert-success', 'd-none');
            successAlert.classList.add('alert-danger');
            
            // Hide the alert after 5 seconds
            setTimeout(() => {
                successAlert.classList.add('d-none');
                successAlert.classList.remove('alert-danger');
                successAlert.classList.add('alert-success');
            }, 5000);
        });
    });

    // Update severity value display
    document.getElementById('complaintSeverity').addEventListener('input', function() {
        const value = this.value;
        const severityValue = document.getElementById('severityValue');
        
        let text, color;
        switch(parseInt(value)) {
            case 1:
                text = 'Very Low';
                color = '#28a745';
                break;
            case 2:
                text = 'Low';
                color = '#5cb85c';
                break;
            case 3:
                text = 'Medium';
                color = '#6c757d';
                break;
            case 4:
                text = 'High';
                color = '#fd7e14';
                break;
            case 5:
                text = 'Critical';
                color = '#dc3545';
                break;
        }
        
        severityValue.textContent = text;
        severityValue.style.color = color;
    });

    // Handle Book Bus Form Submission (Simplified)
    document.getElementById('bookBusForm').addEventListener('submit', function(e) {
        e.preventDefault();

        const submitBtn = this.querySelector('button[type="submit"]');
        const originalBtnText = submitBtn.innerHTML;

        // Show loading state
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Submitting...';

        // Get form data
        const formData = new FormData(this);
        const busId = document.getElementById('bookBusSelect').value;
        const boardingStop = document.getElementById('bookBoardingStop').value.trim();
        const destination = document.getElementById('bookDestination').value.trim();

        // Basic validation
        if (!busId || !boardingStop || !destination) {
          alert('Please fill in all required fields');
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalBtnText;
          return;
        }

        // Submit via fetch with credentials
        fetch('/api/bus-requests/request', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          credentials: 'include',
          body: JSON.stringify({
            busId: busId,
            boardingStop: boardingStop,
            destination: destination
          })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Show success message
            const alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-success alert-dismissible fade show';
            alertDiv.role = 'alert';
            alertDiv.innerHTML = `
              ${data.message || 'Bus request submitted successfully!'}
              <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            `;
            document.querySelector('.container').prepend(alertDiv);

            // Close the modal
            const bookBusModal = bootstrap.Modal.getInstance(document.getElementById('bookBusModal'));
            if (bookBusModal) {
              bookBusModal.hide();
            }

            // Refresh the page after a short delay
            setTimeout(() => {
              window.location.reload();
            }, 1500);
          } else {
            alert(data.message || 'Failed to submit request. Please try again.');
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred. Please check your connection and try again.');
        })
        .finally(() => {
          submitBtn.disabled = false;
          submitBtn.innerHTML = originalBtnText;
        });
      });

    // Function to cancel a bus request
    window.cancelBusRequest = function(requestId) {
        if (!confirm('Are you sure you want to cancel this bus request?')) {
            return;
        }
        
        fetch(`/api/bus-requests/${requestId}`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Show success message and reload the page
                const alertDiv = document.createElement('div');
                alertDiv.className = 'alert alert-success alert-dismissible fade show';
                alertDiv.role = 'alert';
                alertDiv.innerHTML = `
                    ${data.message || 'Bus request cancelled successfully.'}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                `;
                document.querySelector('.container').prepend(alertDiv);
                
                // Reload the page after a short delay
                setTimeout(() => {
                    window.location.reload();
                }, 1500);
            } else {
                throw new Error(data.message || 'Failed to cancel bus request');
            }
        })
        .catch(error => {
            console.error('Error:', error);
            alert('Error: ' + (error.message || 'Failed to cancel bus request'));
        });
    };
  });
</script>

<script>
// Show alert function for toast notifications
function showAlert(message, type = 'info') {
  // Create toast container if it doesn't exist
  let toastContainer = document.getElementById('toast-container');
  if (!toastContainer) {
    toastContainer = document.createElement('div');
    toastContainer.id = 'toast-container';
    toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
    toastContainer.style.zIndex = '1100';
    document.body.appendChild(toastContainer);
  }

  // Create toast element
  const toastId = 'toast-' + Date.now();
  const toast = document.createElement('div');
  toast.id = toastId;
  toast.className = `toast align-items-center text-white bg-${type} border-0`;
  toast.role = 'alert';
  toast.setAttribute('aria-live', 'assertive');
  toast.setAttribute('aria-atomic', 'true');

  // Toast content
  toast.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">
        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'} me-2"></i>
        ${message}
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
  `;

  // Add to container
  toastContainer.appendChild(toast);

  // Initialize and show toast
  const bsToast = new bootstrap.Toast(toast, { autohide: true, delay: 5000 });
  bsToast.show();

  // Remove toast after it's hidden
  toast.addEventListener('hidden.bs.toast', function () {
    toast.remove();

    // Remove container if no more toasts
    if (toastContainer.children.length === 0) {
      toastContainer.remove();
    }
  });
}
</script>

<style>
/* Ensure modal is fully interactive */
#bookBusModal {
  pointer-events: auto !important;
}

#bookBusModal .modal-dialog {
  pointer-events: auto !important;
}

#bookBusModal .modal-content {
  pointer-events: auto !important;
}

#bookBusModal .modal-body {
  pointer-events: auto !important;
}

#bookBusModal .modal-footer {
  pointer-events: auto !important;
}

/* Override any conflicting styles */
#bookBusModal * {
  pointer-events: auto !important;
}

/* Ensure form elements are clickable */
#bookBusModal select,
#bookBusModal input,
#bookBusModal button {
  pointer-events: auto !important;
  cursor: pointer !important;
}

/* Fix modal backdrop issues */
.modal-backdrop {
  pointer-events: none !important;
}

.modal {
  pointer-events: none !important;
}

.modal.show {
  pointer-events: auto !important;
}
</style>