<%- include('../partials/header') %>
<%- include('../partials/navbar') %>

<div class="container py-4">
  <!-- Page Header -->
  <div class="d-flex justify-content-between align-items-center mb-4">
    <div>
      <h1 class="h3 mb-1">Pending Bus Requests</h1>
      <p class="text-muted mb-0">Review and manage student bus requests</p>
    </div>
    <a href="/driver/dashboard" class="btn btn-outline-secondary">
      <i class="fas fa-arrow-left me-2"></i> Back to Dashboard
    </a>
  </div>

  <!-- Messages -->
  <% if (locals.error_msg) { %>
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
      <i class="fas fa-exclamation-circle me-2"></i><%= error_msg %>
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  <% } %>

  <% if (locals.success_msg) { %>
    <div class="alert alert-success alert-dismissible fade show" role="alert">
      <i class="fas fa-check-circle me-2"></i><%= success_msg %>
      <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
  <% } %>

  <!-- Pending Requests -->
  <div class="row">
    <div class="col-12">
      <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
          <h5 class="mb-0">
            <i class="fas fa-clock me-2"></i>Pending Requests
            <span class="badge bg-light text-primary ms-2" id="pendingCount">
              <%= requests ? requests.length : 0 %>
            </span>
          </h5>
        </div>
        <div class="card-body p-0">
          <% if (requests && requests.length > 0) { %>
            <div class="list-group list-group-flush">
              <% requests.forEach(request => { %>
                <div class="list-group-item request-item" data-request-id="<%= request._id %>">
                  <div class="d-flex justify-content-between align-items-start">
                    <div class="flex-grow-1">
                      <div class="d-flex align-items-center mb-2">
                        <div class="bg-light rounded-circle p-2 me-3">
                          <i class="fas fa-user-graduate text-primary"></i>
                        </div>
                        <div>
                          <h6 class="mb-0"><%= request.student.name %></h6>
                          <p class="text-muted mb-0 small">
                            <i class="fas fa-id-card me-1"></i> <%= request.student.studentId %> |
                            <i class="fas fa-graduation-cap me-1"></i> <%= request.student.department %>
                          </p>
                        </div>
                      </div>

                      <div class="row g-3 mb-3">
                        <div class="col-md-4">
                          <div class="bg-light p-2 rounded">
                            <small class="text-muted d-block">Boarding Stop</small>
                            <strong><%= request.boardingStop %></strong>
                          </div>
                        </div>
                        <div class="col-md-4">
                          <div class="bg-light p-2 rounded">
                            <small class="text-muted d-block">Destination</small>
                            <strong><%= request.destination %></strong>
                          </div>
                        </div>
                        <div class="col-md-4">
                          <div class="bg-light p-2 rounded">
                            <small class="text-muted d-block">Requested</small>
                            <strong><%= new Date(request.createdAt).toLocaleString() %></strong>
                          </div>
                        </div>
                      </div>

                      <div class="d-flex align-items-center">
                        <span class="badge bg-warning text-dark me-2">
                          <i class="fas fa-clock me-1"></i>Pending
                        </span>
                        <small class="text-muted">
                          Bus: <%= request.bus.busName %> (#<%= request.bus.busNumber %>)
                        </small>
                      </div>
                    </div>

                    <div class="d-flex gap-2">
                      <button class="btn btn-success btn-sm" onclick="acceptRequest('<%= request._id %>')">
                        <i class="fas fa-check me-1"></i> Accept
                      </button>
                      <button class="btn btn-danger btn-sm" onclick="rejectRequest('<%= request._id %>')">
                        <i class="fas fa-times me-1"></i> Reject
                      </button>
                    </div>
                  </div>
                </div>
              <% }); %>
            </div>
          <% } else { %>
            <div class="text-center py-5">
              <div class="bg-light rounded-circle d-inline-flex align-items-center justify-content-center mb-3" style="width: 80px; height: 80px;">
                <i class="fas fa-inbox text-muted fa-2x"></i>
              </div>
              <h5 class="mb-2">No Pending Requests</h5>
              <p class="text-muted mb-0">All caught up! No pending bus requests at the moment.</p>
            </div>
          <% } %>
        </div>
      </div>
    </div>
  </div>

  <!-- Auto-refresh info -->
  <% if (requests && requests.length > 0) { %>
    <div class="row mt-3">
      <div class="col-12">
        <div class="alert alert-info">
          <i class="fas fa-info-circle me-2"></i>
          <strong>Auto-refresh:</strong> This page will automatically refresh every 30 seconds to show new requests.
        </div>
      </div>
    </div>
  <% } %>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  // Auto-refresh every 30 seconds if there are pending requests
  <% if (requests && requests.length > 0) { %>
    setInterval(function() {
      location.reload();
    }, 30000);
  <% } %>

  // Initialize tooltips
  const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
  tooltipTriggerList.map(function (tooltipTriggerEl) {
    return new bootstrap.Tooltip(tooltipTriggerEl);
  });
});

// Accept request function
async function acceptRequest(requestId) {
  if (!confirm('Are you sure you want to accept this bus request?')) {
    return;
  }

  const button = event.target.closest('button');
  const originalText = button.innerHTML;

  // Show loading state
  button.disabled = true;
  button.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Accepting...';

  try {
    const response = await fetch(`/api/bus-requests/${requestId}/accept`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });

    const data = await response.json();

    if (data.success) {
      // Show success message
      showToast('Request accepted successfully!', 'success');

      // Remove the request from the list
      const requestItem = document.querySelector(`[data-request-id="${requestId}"]`);
      if (requestItem) {
        requestItem.remove();
      }

      // Update pending count
      const pendingCount = document.getElementById('pendingCount');
      if (pendingCount) {
        pendingCount.textContent = parseInt(pendingCount.textContent) - 1;
      }

      // If no more requests, show empty state
      const requestItems = document.querySelectorAll('.request-item');
      if (requestItems.length === 0) {
        location.reload();
      }
    } else {
      showToast(data.message || 'Failed to accept request', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showToast('An error occurred. Please try again.', 'error');
  } finally {
    // Restore button state
    button.disabled = false;
    button.innerHTML = originalText;
  }
}

// Reject request function
async function rejectRequest(requestId) {
  if (!confirm('Are you sure you want to reject this bus request?')) {
    return;
  }

  const button = event.target.closest('button');
  const originalText = button.innerHTML;

  // Show loading state
  button.disabled = true;
  button.innerHTML = '<span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span> Rejecting...';

  try {
    const response = await fetch(`/api/bus-requests/${requestId}/reject`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    });

    const data = await response.json();

    if (data.success) {
      // Show success message
      showToast('Request rejected successfully!', 'success');

      // Remove the request from the list
      const requestItem = document.querySelector(`[data-request-id="${requestId}"]`);
      if (requestItem) {
        requestItem.remove();
      }

      // Update pending count
      const pendingCount = document.getElementById('pendingCount');
      if (pendingCount) {
        pendingCount.textContent = parseInt(pendingCount.textContent) - 1;
      }

      // If no more requests, show empty state
      const requestItems = document.querySelectorAll('.request-item');
      if (requestItems.length === 0) {
        location.reload();
      }
    } else {
      showToast(data.message || 'Failed to reject request', 'error');
    }
  } catch (error) {
    console.error('Error:', error);
    showToast('An error occurred. Please try again.', 'error');
  } finally {
    // Restore button state
    button.disabled = false;
    button.innerHTML = originalText;
  }
}

// Toast notification function
function showToast(message, type = 'info') {
  // Create toast container if it doesn't exist
  let toastContainer = document.getElementById('toast-container');
  if (!toastContainer) {
    toastContainer = document.createElement('div');
    toastContainer.id = 'toast-container';
    toastContainer.className = 'toast-container position-fixed top-0 end-0 p-3';
    toastContainer.style.zIndex = '1100';
    document.body.appendChild(toastContainer);
  }

  // Create toast element
  const toastId = 'toast-' + Date.now();
  const toast = document.createElement('div');
  toast.id = toastId;
  toast.className = `toast align-items-center text-white bg-${type} border-0`;
  toast.role = 'alert';
  toast.setAttribute('aria-live', 'assertive');
  toast.setAttribute('aria-atomic', 'true');

  // Toast content
  toast.innerHTML = `
    <div class="d-flex">
      <div class="toast-body">
        <i class="fas ${type === 'success' ? 'fa-check-circle' : 'fa-exclamation-circle'} me-2"></i>
        ${message}
      </div>
      <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
    </div>
  `;

  // Add to container
  toastContainer.appendChild(toast);

  // Initialize and show toast
  const bsToast = new bootstrap.Toast(toast, { autohide: true, delay: 5000 });
  bsToast.show();

  // Remove toast after it's hidden
  toast.addEventListener('hidden.bs.toast', function () {
    toast.remove();

    // Remove container if no more toasts
    if (toastContainer.children.length === 0) {
      toastContainer.remove();
    }
  });
}
</script>

<%- include('../partials/footer') %>
